{"version":3,"sources":["webpack:///./src/pages/writing/tags.js"],"names":["TagButton","styled","Link","theme","colors","gray","black","fontSizes","white","TagsPage","data","group","allMarkdownRemark","title","site","siteMetadata","property","content","name","as","id","mt","mb","style","paddingLeft","display","map","tag","marginRight","space","marginBottom","to","kebabCase","fieldValue","key","totalCount","pageQuery"],"mappings":"4FAAA,oNAaMA,EAAYC,kBAAOC,QAAV,sEAAGD,CAAH,kKACC,qBAAGE,MAAkBC,OAAOC,KAAK,MACtC,qBAAGF,MAAkBC,OAAOE,SAExB,qBAAGH,MAAkBI,UAAU,MAG5B,qBAAGJ,MAAkBC,OAAOE,SACjC,qBAAGH,MAAkBC,OAAOI,SAgF1BC,UA1EE,SAAC,GAOX,IAAD,IANJC,KACuBC,EAKnB,EALFC,kBAAqBD,MAEHE,EAGhB,EAJFC,KACEC,aAAgBF,MAIpB,OACE,oCACE,kBAAC,SAAD,KACE,yCAAeA,GACf,0BAAMG,SAAS,eAAeC,QAASJ,IACvC,0BAAMG,SAAS,WAAWC,QAAS,UAAYJ,IAC/C,0BAAMK,KAAK,gBAAgBD,QAAS,UAAYJ,KAGlD,kBAAC,MAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,OAEF,kBAAC,MAAD,CAAKM,GAAG,OAAOC,GAAG,gBAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,GAAI,CAAC,EAAG,GAAIC,GAAI,CAAC,KAAzB,SAKF,kBAAC,MAAD,KACE,wBAAIC,MAAO,CAAEC,YAAa,EAAGC,QAAS,UACnCd,EAAMe,KAAI,SAAAC,GAAG,OACZ,wBACEJ,MAAO,CACLK,YAAazB,IAAM0B,MAAM,GACzBC,aAAc,SACdL,QAAS,iBAGX,kBAACzB,EAAD,CACE+B,GAAE,iBAAmBC,IAAUL,EAAIM,YAAjC,IACFC,IAAKP,EAAIM,YAERN,EAAIM,WAJP,KAIqBN,EAAIQ,WAJzB,gBAqCb,IAAMC,EAAS","file":"component---src-pages-writing-tags-js-babcee4b2c3556271c7b.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport kebabCase from \"lodash/kebabCase\"\nimport { Helmet } from \"react-helmet\"\nimport { Link, graphql } from \"gatsby\"\nimport Navigation from \"../../components/Navigation\"\nimport { Box } from \"rebass\"\nimport Header from \"../../components/Header\"\nimport { Title2 } from \"../../components/Typography\"\nimport DefaultLayout from \"../../components/Layouts/Default\"\nimport styled from \"styled-components\"\nimport theme from \"../../layouts/theme\"\n\nconst TagButton = styled(Link)`\n  background: ${({ theme }) => theme.colors.gray[0]};\n  color: ${({ theme }) => theme.colors.black};\n  border-radius: 4px;\n  font-size: ${({ theme }) => theme.fontSizes[1]};\n  padding: 0.5rem 0.75rem;\n  &:hover {\n    background: ${({ theme }) => theme.colors.black};\n    color: ${({ theme }) => theme.colors.white};\n    cursor: \"pointer\";\n    transition: all ease 0.2s;\n  }\n`\n\nconst TagsPage = ({\n  data: {\n    allMarkdownRemark: { group },\n    site: {\n      siteMetadata: { title },\n    },\n  },\n}) => {\n  return (\n    <>\n      <Helmet>\n        <title>Tags | {title}</title>\n        <meta property=\"og:site_name\" content={title} />\n        <meta property=\"og:title\" content={\"Tags | \" + title} />\n        <meta name=\"twitter:title\" content={\"Tags | \" + title} />\n      </Helmet>\n\n      <Box>\n        <DefaultLayout>\n          <Navigation />\n        </DefaultLayout>\n        <Box as=\"main\" id=\"main-content\">\n          <DefaultLayout>\n            <Header>\n              <Title2 mt={[6, 9]} mb={[12]}>\n                Tags\n              </Title2>\n            </Header>\n\n            <Box>\n              <ul style={{ paddingLeft: 0, display: \"block\" }}>\n                {group.map(tag => (\n                  <li\n                    style={{\n                      marginRight: theme.space[2],\n                      marginBottom: \"1.8rem\",\n                      display: \"inline-block\",\n                    }}\n                  >\n                    <TagButton\n                      to={`/writing/tags/${kebabCase(tag.fieldValue)}/`}\n                      key={tag.fieldValue}\n                    >\n                      {tag.fieldValue} ({tag.totalCount})\n                    </TagButton>\n                  </li>\n                ))}\n              </ul>\n            </Box>\n          </DefaultLayout>\n        </Box>\n      </Box>\n    </>\n  )\n}\n\nTagsPage.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      group: PropTypes.arrayOf(\n        PropTypes.shape({\n          fieldValue: PropTypes.string.isRequired,\n          totalCount: PropTypes.number.isRequired,\n        }).isRequired\n      ),\n    }),\n    site: PropTypes.shape({\n      siteMetadata: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n      }),\n    }),\n  }),\n}\n\nexport default TagsPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(limit: 2000) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`\n"],"sourceRoot":""}